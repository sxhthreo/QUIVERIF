 pragma solidity ^0.4.22;
 

contract NGToken{
	string constant private NAME 			= "NEO Genesis Token";
	string constant private SYMBOL	 		= "NGT";
	uint8 constant private DECIMALS 		= 18;
	uint256 constant private INITIAL_SUPPLY	= 20000000000 * (10 ** DECIMALS);
	uint256 private totalBurned				= 0;
	mapping(address => uint256) private balances;
	mapping(address => mapping(address => uint256)) private allowed;
	
	function NGToken() public {
	  balances[msg.sender] = INITIAL_SUPPLY;
	}
	
	function transfer(address _to, uint256 _value) public returns (bool success) {
		require(_to != address(0x0));
		require(balances[msg.sender] >= _value);
		balances[msg.sender] -= _value;
		balances[_to] += _value;
		//Transfer(msg.sender, _to, _value);
		return true;
	}

	function multipleTransfer(address _to1, address _to2, uint256 _value) public returns (bool success) {
		require(_value + _value > 0);
		require(balances[msg.sender] >= _value + _value);
		balances[msg.sender] = balances[msg.sender] - _value - _value;
		balances[_to1] += _value;
		balances[_to2] += _value;
		
		//Transfer(msg.sender, _to1, _value);
		//Transfer(msg.sender, _to2, _value);

		return true;
	}

	function batchTransfer(address _to1, address _to2, uint256 _value1, uint256 _value2) public returns (bool success) {
		require(balances[msg.sender] >= _value1);
		balances[msg.sender] -= _value1;
		balances[_to1] += _value1;
		//Transfer(msg.sender, _to1, _value1);
		require(balances[msg.sender] >= _value2);
		balances[msg.sender] -= _value1;
		balances[_to2] += _value2;
		//Transfer(msg.sender, _to2, _value2);
		return true;
	}

	function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
		require(_to != address(0x0));
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
        balances[_from] -= _value;
        balances[_to] += _value;
		allowed[_from][msg.sender] -= _value;
        //Transfer(_from, _to, _value);
        return true;
	}
	

    function burn(uint256 _value, bytes _data) public returns (bool success) {
		require(balances[msg.sender] >= _value);
		balances[msg.sender] -= _value;
		totalBurned += _value;
		//Burn(msg.sender, _value, totalSupply(), _data);
		return true;
    }

    function burnFrom(address _from, uint256 _value, bytes _data) public returns (bool success) {
		if (transferFrom(_from, msg.sender, _value)) {
			return burn(_value, _data);
		}
        return false;
    }


	//Stop
	function () public {
        require(false);
    }
}