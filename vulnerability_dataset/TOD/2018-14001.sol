contract StandardToken
{
    string public name;
    string public symbol; 
    uint256 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    function transfer(address _to, uint256 _value) public returns (bool) {
        require( _value < balanceOf[msg.sender] || balanceOf[_to]+_value > balanceOf[_to]) ;
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require( _value < balanceOf[_from] || _value < allowance[_from][msg.sender] || balanceOf[_to]+_value > balanceOf[_to] );
        balanceOf[_from] -=_value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowance[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }
}

contract ExtendetdToken is StandardToken
{
    function batchTransfer(address _receiver1, address _receiver2, uint256 _value) public returns (bool) { 
        uint256 amount =  _value + _value;
        require(balanceOf[msg.sender] > amount);
        balanceOf[msg.sender] -= amount;
        balanceOf[_receiver1] += _value;
        balanceOf[_receiver2] += _value;
        return true;
    }
}

