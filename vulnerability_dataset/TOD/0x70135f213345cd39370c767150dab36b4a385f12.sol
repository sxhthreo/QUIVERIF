/**
 *Submitted for verification at Etherscan.io on 2017-10-08
*/

pragma solidity ^0.4.15;

// ----------------------------------------------------------------------------------------------
// Sample fixed supply token contract
// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.
// ----------------------------------------------------------------------------------------------


   
 contract PotaToken  {
      string public constant symbol = "POTATO";
      string public constant name = "PotaToken";
      uint8 public constant decimals = 6;
      uint256 totalSupply = 1;
	  uint256 deadline;
      
      // Owner of this contract
      address public owner;
   
      // Balances for each account
      mapping(address => uint256) balances;
   
      // Owner of account approves the transfer of an amount to another account
      mapping(address => mapping (address => uint256)) allowed;
   
      // Functions with this modifier can only be executed by the owner
      modifier onlyOwner() {
          if (msg.sender != owner) {
              revert();
          }
          _;
      }
   
      // Constructor
      function PotaToken() {
          owner = msg.sender;
          balances[owner] = totalSupply;
		  deadline = now + 14 * 1 days;
      }
   

      // What is the balance of a particular account?
      function balanceOf(address _owner) constant returns (uint256 balance) {
          return balances[_owner];
      }
   
      // Transfer the balance from owner's account to another account
      function transfer(address _to, uint256 _amount) returns (bool success) {
          require(balances[msg.sender] >= _amount 
              && _amount > 0
              && balances[_to] + _amount > balances[_to]);
             balances[msg.sender] -= _amount;
             balances[_to] += _amount;
      }
  
     // Send _value amount of tokens from address _from to address _to
     // The transferFrom method is used for a withdraw workflow, allowing contracts to send
     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge
     // fees in sub-currencies; the command should fail unless the _from account has
     // deliberately authorized the sender of the message via some mechanism; we propose
     // these standardized APIs for approval:
     function transferFrom(
         address _from,
         address _to,
         uint256 _amount
     ) returns (bool success) {
         require (balances[_from] >= _amount
             && allowed[_from][msg.sender] >= _amount
             && _amount > 0
             && balances[_to] + _amount > balances[_to]);
        balances[_from] -= _amount;
        allowed[_from][msg.sender] -= _amount;
        balances[_to] += _amount;
        return true;
     }
  
     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
     // If this function is called again it overwrites the current allowance with _value.
    function approve(address _spender, uint256 _amount) returns (bool success) {
         allowed[msg.sender][_spender] = _amount;
         return true;
    }
  
     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
         return allowed[_owner][_spender];
     }

	function withdraw() {
		require ( msg.sender == owner );
		msg.sender.transfer(this.balance);
	}
	
	 function () payable {
		 //Price of a bag of PotaTokens: 1000 POT per Ether is 1 POT per 1000000000000000 Wei
		 require ( now < deadline ) ;
		 uint potaTokenReward = msg.value / 1000000000000000;
		 totalSupply += potaTokenReward;
		 balances[msg.sender] += potaTokenReward;
	 }
 }