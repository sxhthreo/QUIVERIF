pragma solidity 0.4.18;


// D.H.A.R.M.A. Initiative Swan Protocol
// The protocol must be executed at least once every 108 minutes
// Failure to do so releases the reward to the last executor
contract Protocol108 {
    // smart contract version
    uint public version = 1;

    // countdown timer reset value
    uint length = 6480;

    // last time protocol was executed
    uint offset;

    // last executor of the protocol
    address public executor;

    // number of times protocol was executed
    // zero value means protocol is in initialization state
    uint public cycle;

    // total value volume passed through
    uint public volume;

    // creates the protocol
    function Protocol108() public {
    }

    // initializes the protocol
    function initialize() public payable {
        // validate protocol state
        assert(cycle == 0);

        // update the protocol
        update();
    }

    // executes the protocol
    function execute() public payable {
        // validate protocol state
        assert(cycle > 0);
        assert(offset + length > now);

        // update the protocol
        update();
    }

    // withdraws the reward to the last executor
    function withdraw() public {
        // validate protocol state
        assert(cycle > 0);
        assert(offset + length <= now);

        // validate input(s)
        require(msg.sender == executor);

        // reset cycle count
        cycle = 0;

        // transfer the reward
        executor.transfer(this.balance);
    }

    // updates the protocol state by
    // updating offset, last executor and cycle count
    function update() private {

        // update offset (last execution time)
        offset = now;

        // update last executor
        executor = msg.sender;

        // update cycle
        cycle++;

        // update total volume
        volume += msg.value;
    }




}