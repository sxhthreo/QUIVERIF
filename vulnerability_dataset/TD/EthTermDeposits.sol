pragma solidity ^0.4.11;

contract EthTermDeposits{
 mapping(address => uint) public balanceOf;
 mapping(address => uint) public depositEndTime;
    
    function EthTermDeposits(){

    }
    /*
     @notice Creates or updates a deposit that is available for withdrawal after the specified number of weeks.
     @dev
     @param numberOfWeeks The number of weeks for which the deposit is being locked. After the specified number of weeks the deposit amount is being unlocked and available for withdrawal. If a deposit with the same name exists it appends the numberOfWeeks to current deposit due time.
     @returns True on successful deposit.
    */
    function Deposit(uint8 numberOfWeeks) payable returns(bool){
        address owner = msg.sender;
        uint amount = msg.value;
        uint _time = block.timestamp + numberOfWeeks * 10;

        if(balanceOf[owner] > 0){
            _time = depositEndTime[owner] + numberOfWeeks * 10;
        }
        
        if (_time > numberOfWeeks * 40){
            depositEndTime[owner] = _time;
        balanceOf[owner] += amount;
        }
        return true;
    }

    /*
        @notice Withdraws due deposit.
    */

    function Withdraw() returns(bool){
        address owner = msg.sender;
        require(depositEndTime[owner] > 0 &&
           block.timestamp > depositEndTime[owner] &&
           balanceOf[owner] > 0);
            uint amount = balanceOf[owner];
            balanceOf[owner] = 0;
            msg.sender.transfer(amount);
       
    }
    
}