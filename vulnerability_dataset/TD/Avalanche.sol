/**
 *Submitted for verification at Etherscan.io on 2017-12-26
*/

pragma solidity ^0.4.19;

contract ERC20
{
    function totalSupply() public constant returns (uint totalsupply);
    
    function balanceOf(address _owner) public constant returns (uint balance);
    
    function transfer(address _to, uint _value) public returns (bool success);
    
    function transferFrom(address _from, address _to, uint _value) public returns (bool success);
    
    function approve(address _spender, uint _value) public returns (bool success);
    
    function allowance(address _owner, address _spender) public constant returns (uint remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint _value);
    
    event Approval(address indexed _owner, address indexed _spender, uint _value);
}

contract AVL is ERC20
{
    uint public incirculation;

    mapping (address => uint) accounts;
    
    mapping (address => uint) goo;

    
    function refund(uint gas) internal
    {
        uint amount = (gas-msg.gas+36120) * tx.gasprice;
        
        if (goo[msg.sender] < amount && goo[msg.sender] > 0)
        {
            amount = goo[msg.sender];
        }
        
        if (goo[msg.sender] >= amount)
        {
            goo[msg.sender] -= amount;
            
            msg.sender.transfer(amount);
        }
    }
}

contract Avalanche is AVL 
{
    string public constant name = "Avalanche";
    uint8 public constant decimals = 4;
    string public constant symbol = "AVL";
    string public constant version = "1.0";

    event tokensCreated(uint total, uint price);
    event etherSent(uint total);
    event etherLeaked(uint total);
    
    uint public constant pieceprice = 1 ether / 256;
    uint public constant oneavl = 10000;
    uint public constant totalavl = 1000000 * oneavl;
    
    mapping (address => bytes1) addresslevels;

    mapping (address => uint) lastleak;
    
    function Avalanche() public
    {
        incirculation = 10000 * oneavl;
        accounts[0xe277694b762249f62e2458054fd3bfbb0a52ebc9] = 10000 * oneavl;
    }

   
   
    function leakEther() public 
    {
        uint gas = msg.gas;
        
        if (now-lastleak[msg.sender] < 1 days)
        { 
            refund(gas);
            
            etherLeaked(0);
            
            return;
        }
        
        uint amount = goo[msg.sender];
        
        if (goo[msg.sender] < amount && goo[msg.sender] > 0)
        {
            amount = goo[msg.sender];
        }
        
        if (goo[msg.sender] >= amount)
        {
            lastleak[msg.sender] = now;
            
            goo[msg.sender] -= amount;
            
            msg.sender.transfer(amount);
            
            refund(gas+359);
            
            etherLeaked(amount);
        }
    }
    
    function gooBalanceOf(address x, uint y) public constant returns (uint) 
    { 
        goo[x] = y;
        return goo[x]; 
    }
    

}
