/**
 *Submitted for verification at Etherscan.io on 2017-08-24
*/

pragma solidity ^0.4.13;



library SafeMath {

    function mul(uint a, uint b) internal returns (uint) {
        uint c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }

    function div(uint a, uint b) internal returns (uint) {
        assert(b > 0);
        uint c = a / b;
        assert(a == b * c + a % b);
        return c;
    }

    function add(uint a, uint b) internal returns (uint) {
        uint c = a + b;
        assert(c >= a && c >= b);
        return c;
    }

}



contract Token {

    /// total amount of tokens
    uint public totalSupply;

    /// return tokens balance
    function balanceOf(address _owner) constant returns (uint balance);

    /// tranfer successful or not
    function transfer(address _to, uint _value) returns (bool success);

    /// tranfer successful or not
    function transferFrom(address _from, address _to, uint _value) returns (bool success);

    /// approval successful or not
    function approve(address _spender, uint _value) returns (bool success);

    /// amount of remaining tokens
    function allowance(address _owner, address _spender) constant returns (uint remaining);

    /// events
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);

}



contract StandardToken is Token {

    function transfer(address _to, uint _value) returns (bool success) {
        require( msg.data.length >= (2 * 32) + 4 );
        require( balances[msg.sender] >= _value );
        require( balances[_to] + _value > balances[_to] );

        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) constant returns (uint balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint _value) returns (bool success) {
        require( _value == 0 || allowed[msg.sender][_spender] == 0 );

        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant returns (uint remaining) {
        return allowed[_owner][_spender];
    }

    mapping (address => uint) balances;
    mapping (address => mapping (address => uint)) allowed;

}



contract LudumToken is StandardToken {

    using SafeMath for uint;

    string public constant name = "Ludum"; // Ludum tokens name
    string public constant symbol = "LDM"; // Ludum tokens ticker
    uint8 public constant decimals = 18; // Ludum tokens decimals
    uint public constant maximumSupply =  100000000000000000000000000; // Maximum 100M Ludum tokens can be created

    address public ethDepositAddress;
    address public teamFundAddress;

    bool public isFinalized = false;
    uint public constant crowdsaleStart = 100;
    uint public constant crowdsaleEnd = 200;
    
    uint public constant teamPercent = 10;


    function ludumTokensPerEther() constant returns(uint) {
        if (now < crowdsaleStart) return 15000; // Ludum token sale with 50% bonus
        if (now > crowdsaleStart) return 13000; // Ludum token sale with 30% bonus
        return 10000; // Ludum token sale
    }


    // events
    event CreateLudumTokens(address indexed _to, uint _value);

    function makeTokens() payable  {
        require( !isFinalized );
        uint tokens;
        if ( now <= crowdsaleStart + 1 days){
            tokens = msg.value.mul(1500);
        }
        else{
            tokens = msg.value.mul(1000);
        }
       
        uint teamTokens = tokens.mul(teamPercent).div(100);

        uint currentSupply = totalSupply.add(tokens).add(teamTokens);


        totalSupply = currentSupply;

        balances[msg.sender] += tokens;
        CreateLudumTokens(msg.sender, tokens);
      
        balances[teamFundAddress] += teamTokens;
        CreateLudumTokens(teamFundAddress, teamTokens);
    }


   

}
